Angular JS: js框架  google

版本:
1.2以前: 最古老的版本  不用

1.3以后的: 使用

2.x: 新的框架 和前面的没有一点关系

jq: 1.7  3.1.2

开源库:  免费,代码公开 

下载:
1.官网: https://angularjs.org/
2.github: 代码托管平台 (git)  星级
3.npm: 不用进网站,直接下载

npm: node package manger,node的包管理器: 可以进行许多开源库(框架)的下载;还可以安装许多前端开发需要的工具
1.测试npm是否安装: window+R -->cmd-->node -v   npm -v

dos命令:  
cd: 切换 路径
上下键: 可以直接显示上一次写的命令

下载:
1.切换到对应的文件夹(下载的目标文件夹)
2.npm install
3.npm install 库(框架,工具)名 ,一般找dist文件夹  
	a.下载的是最新版本
	b.根据版本号下载 npm install 库(框架,工具)名@版本号
	
	install --> i

模块: js文件

安装前端的工具: bower(专门进行前端库下载的) gulp grunt
npm 不会下载依赖库,bower可以下载到一些依赖库

bootstrap: 依赖于jQuery实现

-g: 全局安装 在任意地方都能使用该工具
安装bower: npm i -g 工具名bower

测试安装成功: bower -v
1.bower install
2.bower install 库(框架)名#版本号

网速比较乐观: 用npm  或者 bower 没啥大问题

cnpm: 淘宝镜像,安装cnpm ,用npm安装cnpm; 用法和npm一模一样

1.npm install -g cnpm --registry=https://registry.npm.taobao.org    安装cnpm
2.测试cnpm是否安装成功: cnpm -v
3.下载:
cnpm install jquery

切换盘符: c:  d:


angular: js框架  
设计模式: 单例  工厂  代理(委托)
MVC 架构模式

架构模式: 设计整体架构;设计模式: 设计某块内容

model: 模型(数据)
view: 视图(标签)
controller: 控制器

MVC衍生出来的:
MVVM
MVP
MV*

用于解决ajax开发所带来的痛苦: 数据解析;DOM操作

服务器环境下使用angular

使用angular:
1.引入angular.js
2.angular对象

angular的工具方法:
1.bind(this指向,函数)
2.forEach(数组名,function (ele,index) {});
3.toJson(): 将对象变为字符串
4.fromJson(): 字符串变为对象
5.isArray(): 是否是数组
6.isDate(): 是否是时间对象
7.isObject(): 是否是对象
8.lowercase(): 变为小写
9.uppercase(): 变为大写
10.equals(x,y): 判断两个元素是否严格相等  


表达式: {{}},进行一些简单的js操作,但是不能写if,switch,for

指令: ng-

ng-app: 指定angular的作用范围

表单元素: input

ng-model: 将表单元素的数据绑定到了这个值里面

基本用不到 DOM操作: 通过指令实现一些DOM操作

ng-click: 点击

angular的特色:
1.指令: ng-开头
2.数据双向绑定: 数据改变,视图也改变;视图改变,数据也改变

ng-app: 指定angular的作用范围
ng-model: 绑定表单元素的数据的
ng-click: 点击
ng-show: 显示/隐藏  (true/false)
ng-init: 初始化数据 (初始化变量)
ng-mouseenter: 鼠标移入
ng-mouseleave: 鼠标移出
ng-keydown:
ng-keyup:...
ng-hide:true 隐藏  false 显示
ng-if:false 移除元素(removeChild)
ng-repeat:  重复执行某些代码(标签)

遍历数组(对象),只要元素
item in arr
元素和下标
(index,value) in arr

ng-repeat自带的值:
$index: 下标
$odd: 是否为奇数
$even: 是否为偶数
$first: 是否为第一个
$last: 是否为最后一个

如果数组里面有重复的数字或者字符串,应该使用track by $index;如果都是对象,不需要使用

MVC架构模式: 模型 视图  控制器

ng-init: 只做一个最简单的数据初始化

ng-controller: 控制器 (控制数据)

控制器是由angular的模块创建的

angular特色:
1.指令
2.数据的双向绑定
3.依赖注入: 函数的形参是固定值,无关顺序

$scope: 是一个对象; 服务 ($scope,$http,$location...) 

$scope: 和数据打交道

$http: 交互

$location: 和url地址打交道

get post jsonp都封装到了$http里面了

$http({
url: ,
params: ,相当于以前的data
method: '',
timeout: ,超时
cache: false,
}) 返回值是promise对象 (es6的)

then(function (str) {
	数据请求成功的时候的回调函数;数据已经解析好了,不需要转换
},function () {
	数据请求失败的时候的回调函数
})

// 1.url地址
// 2.对象: {
params: {a: 1,b:2},
cache: false,
timeout: ...

}
$http.get(url,{}).then();
$http.post().then();

cb=函数名  callback=函数名  : 固定值,JSON_CALLBACK
$http.jsonp().then()














































